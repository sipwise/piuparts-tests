#!/bin/bash

set -x

rm -f piuparts.tap

[ -d artifacts ] || { echo "Error: directory artifacts does not exist." >&2 ; exit 1 ; }

[ -n "$release" ] || { echo "Error: release variable not set." >&2 ; exit 1; }

[ -n "$SCRIPTSDIR" ] || SCRIPTSDIR="$PWD/source/scripts/"

# MT#5671 iff we get release-2.8-update, release-2.8 or release-2.8-builddeps
# then we want to use only the '2.8' part for our release variable
case "$release" in
  release-*)
    release="${release##release-}"
    release="${release%%-update}"
    release="${release%%-builddeps}"
    ;;
  none)
    release=trunk
    ;;
esac

# adjust Debian/release depending on ngcp version
case $release in
  2.*) [ -n "$distribution" ] || distribution="squeeze" ;;
    *) [ -n "$distribution" ] || distribution="wheezy" ;;
esac

if [ -n "$mirror" ] ; then
  echo "** Environment variable \$mirror is set [$mirror], using it **"
else
  case "$distribution" in
    jessie)
      mirror='http://debian.inode.at/debian'
      echo "** Distribution set to jessie, NOT using internal Sipwise mirror but $mirror instead **"
      ;;
    *)
      mirror='http://debian.sipwise.com/debian'
      echo "** Using Debian mirror $mirror **"
      ;;
  esac
fi

case "$distribution" in
  jessie)
    debootstrap_options="--keyring=/usr/share/keyrings/debian-archive-keyring.gpg"
    echo "** Distribution set to jessie, using Debian's default keyring instead of Sipwise' internal one **"
    ;;
  *)
    debootstrap_options="--keyring=/var/cache/pbuilder/base-${distribution}-amd64.cow/etc/apt/trusted.gpg"
    echo "** Using default debootstrap options [$debootstrap_options] **"
    ;;
esac

# we need wget for apt-key installation via scripts/post_chroot_unpack_sipwise_key.sh
debootstrap_options="$debootstrap_options --include=wget"

piuparts_cmdline="sudo release=$release SCRIPTSDIR=$PWD/source/scripts/ MIRROR=$mirror distribution=$distribution DEBOOTSTRAP_OPTIONS=${!debootstrap_options} piuparts_wrapper --mirror=$mirror -i etc/init.d/ngcp-hylafaxplus -i etc/default/ngcp-iaxmodem"

ce_pro_carrier() {
  echo "*** Running for CE packages ***"
  if find artifacts/ -type f ! -name \*-pro\* ! -name \*-carrier\* | grep -q '.' ; then
    $piuparts_cmdline $(find artifacts/ -type f ! -name \*-pro\* ! -name \*-carrier\*) || true
  fi

  echo "*** Running for PRO packages ***"
  if find artifacts/ -type f ! -name \*-ce\* ! -name \*-carrier\* | grep -q '.' ; then
    $piuparts_cmdline $(find artifacts/ -type f ! -name \*-ce\* ! -name \*-carrier\*) || true
  fi

  echo "*** Running for CARRIER packages ***"
  if find artifacts/ -type f ! -name \*-pro\* ! -name \*-ce\* | grep -q '.' ; then
    $piuparts_cmdline $(find artifacts/ -type f ! -name \*-pro\* ! -name \*-ce\*) || true
  fi
}

hylafax_packages() {
  for package in artifacts/*.deb ; do
    if [[ $package =~ hylafaxplus-diva ]] ; then
      echo "*** Running hylafaxplus-diva specific package $package ***"
      $piuparts_cmdline "$package" || true
    elif [[ $package =~ hylafaxplus-iax ]] ; then
      echo "*** Running hylafaxplus-iax specific package $package ***"
      $piuparts_cmdline "$package" || true
    elif [[ $package =~ -ce ]] ; then
      echo "*** Running CE package $package ***"
      $piuparts_cmdline "$package" || true
    elif [[ $package =~ -pro ]] ; then
      echo "*** Running PRO package $package ***"
      $piuparts_cmdline "$package" || true
    elif [[ $package =~ -carrier ]] ; then
      echo "*** Running carrier package $package ***"
      $piuparts_cmdline "$package" || true
    else
      echo "*** Running piuparts for package $package ***"
      $piuparts_cmdline "$package" || true
    fi
  done
}

upgrade_packages() {
  for package in artifacts/*.deb ; do
    if [[ $package =~ ngcp-upgrade-2.(2|4|5|6|7) ]] ; then
      echo "*** Skipping outdated upgrade package $package ***"
    else
      echo "*** Running piuparts for package $package ***"
      $piuparts_cmdline "$package" || true
    fi
  done
}

RUN_CE_PRO_CARRIER=false # by default assume we don't have ce/pro/carrier specific packages
find artifacts/ -name '*-carrier-*' -or -name '*-carrier_*' | grep -q '.' && RUN_CE_PRO_CARRIER=true
find artifacts/ -name '*-pro-*'     -or -name '*-pro_*'     | grep -q '.' && RUN_CE_PRO_CARRIER=true
find artifacts/ -name '*-ce-*'      -or -name '*-ce_*'      | grep -q '.' && RUN_CE_PRO_CARRIER=true

RUN_UPGRADE_PACKAGES=false # by default assume we don't have the upgrade packages to deal with
find artifacts/ -name 'ngcp-upgrade-*' | grep -q '.' && RUN_UPGRADE_PACKAGES=true

RUN_HYLAXFAX_PACKAGES=false # by default assume we don't have the hylafax packages to deal with
find artifacts/ -name '*hylafaxplus-iax*' -or -name '*hylafaxplus-diva*' | grep -q '.' && RUN_HYLAXFAX_PACKAGES=true

if [ "$RUN_HYLAXFAX_PACKAGES" = "true" ] ; then
  echo "*** Found hylafax specific packages, executing hylafax_packages ***"
  hylafax_packages
elif [ "$RUN_UPGRADE_PACKAGES" = "true" ] ; then
  echo "*** Found upgrade specific packages, executing upgrade_packages ***"
  upgrade_packages
elif [ "$RUN_CE_PRO_CARRIER" = "true" ] ; then
  echo "*** Found ce/pro/carrier specific packages, executing ce_pro_carrier ***"
  ce_pro_carrier
else
  echo "*** No ce/pro/carrier specific packages found, executing for all artifacts/*.deb files ***"
  $piuparts_cmdline artifacts/*.deb || true
fi

piuparts_tap piuparts.txt > piuparts.tap
